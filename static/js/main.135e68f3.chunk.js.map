{"version":3,"sources":["components/nav-bar/NavBar.js","components/patient-details/PatientDetails.js","components/support/Support.js","components/guidelines/Guidelines.js","components/calculator/Calculator.js","app/App.js","serviceWorker.js","index.js"],"names":["NavBar","props","List","component","ListItem","ListItemText","inset","variant","className","to","Home","color","Book","AccountBox","PatientsDetails","React","useState","diseaseType","setDiseaseType","controlMode","setControlMode","FormControl","FormLabel","RadioGroup","aria-label","name","value","onChange","event","target","FormControlLabel","control","Radio","label","disabled","Support","Guidelines","Calculator","App","AppBar","position","Toolbar","Container","maxWidth","Paper","elevation","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.135e68f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TypoGraphy from \"@material-ui/core/Typography\";\r\nimport { Home, Book, AccountBox } from \"@material-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./NavBar.css\";\r\nfunction NavBar(props) {\r\n  return (\r\n    <List component=\"nav\">\r\n      <ListItem component=\"div\">\r\n        <ListItemText inset>\r\n          <TypoGraphy variant=\"subtitle1\">\r\n            <Link className=\"nav-link\" to=\"/\">\r\n              Home\r\n            </Link>\r\n            <Home />\r\n          </TypoGraphy>\r\n        </ListItemText>\r\n\r\n        <ListItemText inset>\r\n          <TypoGraphy color=\"inherit\" variant=\"subtitle1\">\r\n            <Link className=\"nav-link\" to=\"/calculator\">\r\n              Calculator\r\n            </Link>\r\n            <Book />\r\n          </TypoGraphy>\r\n        </ListItemText>\r\n        <ListItemText inset>\r\n          <TypoGraphy color=\"inherit\" variant=\"subtitle1\">\r\n            <Link className=\"nav-link\" to=\"/support\">\r\n              Supported Diseases\r\n            </Link>\r\n            <Book />\r\n          </TypoGraphy>\r\n        </ListItemText>\r\n\r\n        <ListItemText inset>\r\n          <TypoGraphy color=\"inherit\" variant=\"subtitle1\">\r\n            <Link className=\"nav-link\" to=\"/guidelines\">\r\n              Important Guidelines\r\n            </Link>\r\n            <AccountBox />\r\n          </TypoGraphy>\r\n        </ListItemText>\r\n      </ListItem>\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport \"./PatientDetails.css\";\r\n\r\nfunction PatientsDetails() {\r\n  const [diseaseType, setDiseaseType] = React.useState(\"ALS\");\r\n  const [controlMode, setControlMode] = React.useState(\"pressure\");\r\n\r\n  const handlDiseaseType = (event) => {\r\n    setDiseaseType(event.target.value);\r\n  };\r\n  const handleControlMode = (event) => {\r\n    setControlMode(event.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"form-control\">\r\n        <FormControl component=\"fieldset\">\r\n          <FormLabel component=\"legend\">\r\n            Please select the disease type\r\n          </FormLabel>\r\n          <RadioGroup\r\n            aria-label=\"diseaseType\"\r\n            name=\"diseaseType\"\r\n            value={diseaseType}\r\n            onChange={handlDiseaseType}\r\n          >\r\n            <FormControlLabel value=\"ALS\" control={<Radio />} label=\"ALS/MND\" />\r\n            <FormControlLabel value=\"COVID\" control={<Radio />} label=\"COVID\" />\r\n            <FormControlLabel\r\n              value=\"other\"\r\n              disabled\r\n              control={<Radio />}\r\n              label=\"Other\"\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <br />\r\n        <FormControl component=\"fieldset\">\r\n          <FormLabel component=\"legend\">\r\n            Please select the ventilator control mode\r\n          </FormLabel>\r\n          <RadioGroup\r\n            aria-label=\"controlMode\"\r\n            name=\"controlMode\"\r\n            value={controlMode}\r\n            onChange={handleControlMode}\r\n          >\r\n            <FormControlLabel\r\n              value=\"volume\"\r\n              control={<Radio />}\r\n              label=\"Volume Control\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"pressure\"\r\n              control={<Radio />}\r\n              label=\"Pressure Control\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"other\"\r\n              disabled\r\n              control={<Radio />}\r\n              label=\"Other\"\r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default PatientsDetails;\r\n","import React from \"react\";\r\n\r\nconst Support = () => <div>Please reach us at following email id </div>;\r\n\r\nexport default Support;\r\n","import React from \"react\";\r\n\r\nconst Guidelines = () => (\r\n  <div>\r\n    Please remember the following guidelines while calculating the ventilator\r\n    parameters\r\n  </div>\r\n);\r\n\r\nexport default Guidelines;\r\n","import React from \"react\";\r\n\r\nconst Calculator = () => (\r\n  <div>This page direcoctly open the pre-configured calculator</div>\r\n);\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport TypoGraphy from \"@material-ui/core/Typography\";\nimport NavBar from \"../components/nav-bar/NavBar\";\nimport PatientDetails from \"../components/patient-details/PatientDetails\";\nimport Support from \"../components/support/Support\";\nimport Guidelines from \"../components/guidelines/Guidelines\";\nimport Calculator from \"../components/calculator/Calculator\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nfunction App() {\n  return (\n    <Router>\n      <AppBar color=\"primary\" position=\"static\">\n        <Toolbar>\n          <TypoGraphy color=\"inherit\">Venti Params Calculator</TypoGraphy>\n          <NavBar />\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"sm\">\n        <div className=\"app-body\">\n          <Paper elevation={3}>\n            <Switch>\n              <Route path=\"/guidelines\">\n                <Guidelines />\n              </Route>\n              <Route path=\"/support\">\n                <Support />\n              </Route>\n              <Route path=\"/calculator\">\n                <Calculator />\n              </Route>\n              <Route path=\"/\">\n                <PatientDetails />\n              </Route>\n            </Switch>\n          </Paper>\n        </div>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}